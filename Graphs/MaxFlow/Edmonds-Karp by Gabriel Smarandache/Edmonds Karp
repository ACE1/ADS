#include<stdio.h>
#include<conio.h>

#define MaxV 50
#define Min(x,y) ((x<y)? (x):(y))
#define Abs(x) ((x>0)? (x):(-x))

int n,m,s,d,viz[MaxV],Q[MaxV];  // capacitatea fiecarui arc
int C[MaxV][MaxV],F[MaxV][MaxV];    // fluxul fiecarui arc

void citire(void);
void ek(void);
void afisare(void);
int bfs(void);

int main()
{
    citire();
    ek();
    afisare();
       
    getch();
    printf("\n Edmonds-Karp!");
    printf("\n Smarandache Alexandru Gabriel");
    printf("\n Grupa 10204 B");
    getch();
    return 0;
}
//should be moved to Graphs/core and called in main!
void citire()
{
    FILE *f = fopen("graf.txt","r");
    int i,x,y,c;
    
    fscanf(f,"%d %d %d %d",&n,&m,&s,&d);
    for(i = 0; i < m; ++i)
    {
        fscanf(f,"%d %d %d",&x,&y,&c);
        C[x][y] = c;
    }
}

//should be moved to Graphs/core and called in main!
void afisare()
{
    int i,j,vf = 0;
    
    for(i = 1; i <= n; ++i)
        for(j = 1; j <= m; ++j)
            if(F[i][j])
                printf("Fluxul arcului %d %d = %d\n",i,j,F[i][j]);
    
    for(i = 1; i <= n; ++i)
        vf += F[i][d];
    
    printf("Fluxul maxim este: %d",vf);
}

//rename Edmonds-Karp()
void ek()
{
    int i,a,b,lg,v;
    int L[MaxV];
    
    do{
        // marchez varfurile intr-o parcurgere in latime
        for(i = 1; i <= n; ++i)
            viz[i] = 0;
        
        if( bfs() )
            return;
        
        // determin lantul de ameliorare in vectorul L
        L[0] = d;
        lg = 0;
        a = b = 10000;
        while(L[lg] != s)
        {
            ++lg;
            L[lg] = Abs(viz[L[lg-1]]);
            if(viz[L[lg-1]] > 0)
                a = Min(a,C[L[lg]][L[lg-1]] - F[L[lg]][L[lg-1]]);
            else
                if(viz[L[lg-1]] < 0)
                    b = Min(b,F[L[lg-1]][L[lg]]);
        }
        
        v = Min(a,b);
        // maresc fluxul de-a lungul lantului
        for(i = lg; i > 0; --i)
            if(viz[L[i-1]] > 0)
                F[L[i]][L[i-1]] += v;
            else
                F[L[i-1]][L[i]] -=v;
    }while(1);
}
//should be moved to Graphs/Traversals and called in Edmonds-Karp!
int bfs()
{
    int p,u,i,x;
    
    Q[0] = s;
    p = u = 0;
    viz[s] = 1;
    while(p <= u && !viz[d])
    {
        x = Q[p++];
        for(i = 1; i <= n; ++i)
            if(!viz[i])
                if(F[x][i] < C[x][i])
                {
                    viz[i] = x;
                    Q[++u] = i;
                }
                else
                    if(F[i][x] > 0)
                    {
                        viz[i] = -x;
                        Q[++u] = i;
                    }
    }
    
    return (!viz[d]);
}
