#include<stdio.h>
#include<stdlib.h>

typedef struct BTreeNode{
	int* keys;
	int t;
	BTreeNode** C;
	int n;
	bool leaf;
};

int t = 3;

BTreeNode* makeEmptyBTree(BTreeNode *root, int t, bool leaf);
BTreeNode* search(BTreeNode* root, int k);
BTreeNode* insert(BTreeNode** root, int k);
void insertNonFull(BTreeNode** node, int k);
void splitChild(int i, BTreeNode** root, BTreeNode** y);
void traverse(BTreeNode* root);

int main(){

	BTreeNode* root = NULL;

	root = insert(&root, 10);
	root = insert(&root, 20);
	root = insert(&root, 5);
	root = insert(&root, 6);
	root = insert(&root, 12);
	root = insert(&root, 30);
	root = insert(&root, 7);
	root = insert(&root, 17);

	traverse(root);

	int k = 6;
	(search(root, k) != NULL) ? printf("\nPresent") : printf("\nNot Present");

	k = 15;
	(search(root, k) != NULL) ? printf("\nPresent") : printf("\nNot Present");


	system("PAUSE");
	return 0;
}


//Create an empty B tree
BTreeNode* makeEmptyBTree(BTreeNode *root, int t, bool leaf){
	root = (BTreeNode*)malloc(sizeof(BTreeNode));
	root->t = t;
	root->leaf = leaf;
	root->keys = (int*)malloc((2 * root->t - 1)*sizeof(int));
	root->C = (BTreeNode**)malloc(2 * root->t*sizeof(int*));
	root->n = 0;

	return root;

}

//Cauta o cheie k in arbore
BTreeNode* search(BTreeNode* root, int k){
	// Find the first key greater than or equal to k
	int i = 0;
	while (i<root->n && k>root->keys[i])
		i++;

	// If the found key is equal to k, return this node
	if (root->keys[i] == k)
		return root;

	// If key is not found here and this is a leaf node
	if (root->leaf == true)
		return NULL;

	// Go to the appropriate child
	return search(root->C[i], k);
}

// The main function that inserts a new key in this B-Tree
BTreeNode* insert(BTreeNode** root, int k){

	if ((*root) == NULL){
		// Allocate memory for root
		*root = makeEmptyBTree(*root, t, true);
		(*root)->keys[0] = k;  // Insert key
		(*root)->n = 1;  // Update number of keys in root
	}
	else{


		// If root is full, then tree grows in height
		if ((*root)->n == 2 * (*root)->t - 1){

			// Allocate memory for new root
			BTreeNode *s = NULL;
			s = makeEmptyBTree(s, t, false);

			// Make old root as child of new root
			s->C[0] = (*root);

			// Split the old root and move 1 key to the new root
			splitChild(0, &s, root);

			// New root has two children now.  Decide which of the
			// two children is going to have new key
			int i = 0;
			if (s->keys[0] < k)
				i++;
			insertNonFull(&s->C[i], k);

			// Change root
			root = &s;

		}
		else  // If root is not full, call insertNonFull for root
			insertNonFull(root, k);
	}

	return *(root);
}


// A utility function to insert a new key in this node
// The assumption is, the node must be non-full when this
// function is called
void insertNonFull(BTreeNode** node, int k){
	// Initialize index as index of rightmost element
	int i = (*node)->n - 1;

	// If this is a leaf node
	if ((*node)->leaf == true){
		// The following loop does two things
		// a) Finds the location of new key to be inserted
		// b) Moves all greater keys to one place ahead
		while (i >= 0 && (*node)->keys[i] > k){
			(*node)->keys[i + 1] = (*node)->keys[i];
			i--;
		}

		// Insert the new key at found location
		(*node)->keys[i + 1] = k;
		(*node)->n = (*node)->n + 1;
	}
	else{ // If this node is not leaf
		// Find the child which is going to have the new key
		while (i >= 0 && (*node)->keys[i] > k)
			i--;

		// See if the found child is full
		if ((*node)->C[i + 1]->n == 2 * t - 1){
			// If the child is full, then split it
			splitChild(i + 1, node, &(*node)->C[i + 1]);

			// After split, the middle key of C[i] goes up and
			// C[i] is splitted into two.  See which of the two
			// is going to have the new key
			if ((*node)->keys[i + 1] < k)
				i++;
		}
		insertNonFull(&(*node)->C[i + 1], k);
	}
}


// A utility function to split the child y of this node
// Note that y must be full when this function is called
void splitChild(int i, BTreeNode** root, BTreeNode** y){
	// Create a new node which is going to store (t-1) keys
	// of y
	BTreeNode *z = NULL;
	z = makeEmptyBTree(z, (*y)->t, (*y)->leaf);
	z->n = t - 1;

	// Copy the last (t-1) keys of y to z
	for (int j = 0; j < t - 1; j++)
		z->keys[j] = (*y)->keys[j + t];

	// Copy the last t children of y to z
	if ((*y)->leaf == false){
		for (int j = 0; j < t; j++)
			z->C[j] = (*y)->C[j + t];
	}

	// Reduce the number of keys in y
	(*y)->n = t - 1;

	// Since this node is going to have a new child,
	// create space of new child
	int j = 0;
	for (j = (*root)->n; j >= i + 1; j--)
		(*root)->C[j + 1] = (*root)->C[j];

	// Link the new child to this node
	(*root)->C[i + 1] = z;

	// A key of y will move to this node. Find location of
	// new key and move all greater keys one space ahead
	for (int j = (*root)->n - 1; j >= i; j--)
		(*root)->keys[j + 1] = (*root)->keys[j];

	// Copy the middle key of y to this node
	(*root)->keys[i] = (*y)->keys[t - 1];

	// Increment count of keys in this node
	(*root)->n = (*root)->n + 1;
}


void traverse(BTreeNode* root){
	// There are n keys and n+1 children, travers through n keys
	// and first n children
	int i;
	for (i = 0; i < root->n; i++)
	{
		// If this is not leaf, then before printing key[i],
		// traverse the subtree rooted with child C[i].
		if (root->leaf == false)
			traverse(root->C[i]);
		printf("%d ", root->keys[i]);
	}

	// Print the subtree rooted with last child
	if (root->leaf == false)
		traverse(root->C[i]);
}
